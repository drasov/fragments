# .github/workflows/ci.yml

# Continuous Integration (CI) Workflow
name: ci

# This workflow will run whenever we push commits to the `main` branch, or
# whenever there's a pull request to the `main` branch. See:
# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#on
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  lint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
  
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
  
      - name: Install node dependencies
        run: npm ci
  
      - name: Run ESLint
        run: npm run lint

  # Lint our Dockerfile using Hadolint
  dockerfile-lint:
    name: Dockerfile Lint
    runs-on: ubuntu-latest
    steps:
      # https://github.com/marketplace/actions/hadolint-action
      - uses: actions/checkout@v4
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
  docker-hub:
      name: Build and Push to Docker Hub
      needs: [lint, dockerfile-lint, unit-tests]
      runs-on: ubuntu-latest
      steps:
        # Set up buildx for optimal Docker Builds
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2

        # Login to Docker Hub using GitHub secrets
        - name: Login to DockerHub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        # Build and Push an Image to Docker Hub
        - name: Build and push
          env:
            # Define an Environment Variable with your Docker Hub Repo
            DOCKERHUB_REPO: drasov/fragments  # Replace `username` with your Docker Hub username
            # Define an Environment Variable with the current git commit's sha
            SHA_TAG: sha-${{ github.sha }}
          uses: docker/build-push-action@v4
          with:
            push: true
            # Use 3 tags: :sha-<commit-sha>, :main, and :latest
            tags: ${{ env.DOCKERHUB_REPO }}:${{ env.SHA_TAG }}, ${{ env.DOCKERHUB_REPO }}:main, ${{ env.DOCKERHUB_REPO }}:latest

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
  
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
  
      - name: Install node dependencies and run Tests
        # There are two ways we could do this:
        #
        # 1. Call `npm ci` followed by `npm test` like so (NOTE: the use of | and -):
        # run: |
        # - npm install
        # - npm test
        #
        # 2. Use `install-ci-test` to do it in a single command, see https://docs.npmjs.com/cli/v8/commands/npm-install-ci-test
        # run: npm install-ci-test
        run: npm install-ci-test
